import t from"body-parser";import e from"cors";import s from"express";import r from"http";import*as n from"zeromq";import o from"express-rate-limit";import a from"dotenv";import i from"is-primitive";import c from"is-plain-object";import l from"fs";import d from"os";import u,{dirname as p}from"path";import{fileURLToPath as f}from"url";import{createLogger as y,format as h,transports as m}from"winston";import{Bitcoin as g}from"bitcoin-computer-bitcore";import w from"pg-promise";import v from"pg-monitor";import{backOff as $}from"exponential-backoff";import{Computer as S}from"@bitcoin-computer/lib";import b from"bitcoind-rpc";import E from"util";import T from"elliptic";import x from"hash.js";const{deleteProperty:O}=Reflect;const R=i;const N=c;const I=t=>"object"==typeof t&&null!==t||"function"==typeof t;const j=t=>{if(!R(t))throw new TypeError("Object keys must be strings or symbols");if((t=>"__proto__"===t||"constructor"===t||"prototype"===t)(t))throw new Error(`Cannot set unsafe key: "${t}"`)};const A=(t,e)=>e&&"function"==typeof e.split?e.split(t):"symbol"==typeof t?[t]:Array.isArray(t)?t:((t,e,s)=>{const r=(t=>Array.isArray(t)?t.flat().map(String).join(","):t)(e?((t,e)=>{if("string"!=typeof t||!e)return t;let s=t+";";return void 0!==e.arrays&&(s+=`arrays=${e.arrays};`),void 0!==e.separator&&(s+=`separator=${e.separator};`),void 0!==e.split&&(s+=`split=${e.split};`),void 0!==e.merge&&(s+=`merge=${e.merge};`),void 0!==e.preservePaths&&(s+=`preservePaths=${e.preservePaths};`),s})(t,e):t);j(r);const n=_.cache.get(r)||s();return _.cache.set(r,n),n})(t,e,(()=>((t,e={})=>{const s=e.separator||".";const r="/"!==s&&e.preservePaths;if("string"==typeof t&&!1!==r&&/\//.test(t))return[t];const n=[];let o="";const a=t=>{let e;""!==t.trim()&&Number.isInteger(e=Number(t))?n.push(e):n.push(t)};for(let e=0;e<t.length;e++){const r=t[e];"\\"!==r?r!==s?o+=r:(a(o),o=""):o+=t[++e]}return o&&a(o),n})(t,e)));const P=(t,e,s,r)=>{if(j(e),void 0===s)O(t,e);else if(r&&r.merge){const n="function"===r.merge?r.merge:Object.assign;n&&N(t[e])&&N(s)?t[e]=n(t[e],s):t[e]=s}else t[e]=s;return t};const _=(t,e,s,r)=>{if(!e||!I(t))return t;const n=A(e,r);let o=t;for(let t=0;t<n.length;t++){const e=n[t];const a=n[t+1];if(j(e),void 0===a){P(o,e,s,r);break}"number"!=typeof a||Array.isArray(o[e])?(I(o[e])||(o[e]={}),o=o[e]):o=o[e]=[]}return t};_.split=A,_.cache=new Map,_.clear=()=>{_.cache=new Map};var H=_;var C=l;var k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var F=function(){function t(t,e){for(var s=0;s<e.length;s++){var r=e[s];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,s,r){return s&&t(e.prototype,s),r&&t(e,r),e}}();var L=function t(e,s){var r=s.indexOf(".");if(!~r){if(null==e)return;return e[s]}var n=s.substring(0,r),o=s.substring(r+1);if(null!=e)return e=e[n],o?t(e,o):e},B=H,U=function(t,e){if("function"!=typeof e)return JSON.parse(C.readFileSync(t));C.readFile(t,"utf-8",(function(t,s){try{s=JSON.parse(s)}catch(e){t=t||e}e(t,s)}))},D=l,G=d;var K=function(){function t(e,s){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.options=s=s||{},s.stringify_width=s.stringify_width||2,s.stringify_fn=s.stringify_fn||null,s.stringify_eol=s.stringify_eol||!1,s.ignore_dots=s.ignore_dots||!1,this.path=e,this.data=this.read()}return F(t,[{key:"set",value:function(t,e,s){var r=this;return"object"===(void 0===t?"undefined":M(t))?function(t,e){var s=0,r=[];if(Array.isArray(t))for(;s<t.length&&!1!==e(t[s],s);++s);else if("object"===(void 0===t?"undefined":k(t))&&null!==t)for(r=Object.keys(t);s<r.length&&!1!==e(t[r[s]],r[s]);++s);}(t,(function(t,e){B(r.data,e,t,s)})):this.options.ignore_dots?this.data[t]=e:B(this.data,t,e,s),this.options.autosave&&this.save(),this}},{key:"get",value:function(t){return t?this.options.ignore_dots?this.data[t]:L(this.data,t):this.toObject()}},{key:"unset",value:function(t){return this.set(t,void 0)}},{key:"append",value:function(t,e){var s=this.get(t);if(s=void 0===s?[]:s,!Array.isArray(s))throw new Error("The data is not an array!");return s.push(e),this.set(t,s),this}},{key:"pop",value:function(t){var e=this.get(t);if(!Array.isArray(e))throw new Error("The data is not an array!");return e.pop(),this.set(t,e),this}},{key:"read",value:function(t){if(!t)try{return U(this.path)}catch(t){return{}}U(this.path,(function(e,s){t(null,s=e?{}:s)}))}},{key:"write",value:function(t,e){return e?D.writeFile(this.path,t,e):D.writeFileSync(this.path,t),this}},{key:"empty",value:function(t){return this.write("{}",t)}},{key:"save",value:function(t){var e=JSON.stringify(this.data,this.options.stringify_fn,this.options.stringify_width,this.options.stringify_eol);return this.write(this.options.stringify_eol?e+G.EOL:e,t),this}},{key:"toObject",value:function(){return this.data}}]),t}();a.config();const W=function(t,e){return new K(t,{stringify_eol:!0})}(`${p(f(import.meta.url))}/../../package.json`);const{PORT:z,ZMQ_URL:J,CHAIN:Y,NETWORK:q,BCN_ENV:V,BCN_URL:Z,DEBUG_MODE:Q,POSTGRES_USER:X,POSTGRES_PASSWORD:tt,POSTGRES_DB:et,POSTGRES_HOST:st,POSTGRES_PORT:rt,RPC_PROTOCOL:nt,RPC_USER:ot,RPC_PASSWORD:at,RPC_HOST:it,RPC_PORT:ct,SERVER_VERSION:lt,TESTING:dt,DEFAULT_WALLET:ut,SYNC_HEIGHT:pt,SYNC_INTERVAL_CHECK:ft,POSTGRES_MAX_PARAM_NUM:yt,DB_CONNECTION_RETRY_TIME:ht,SIGNATURE_FRESHNESS_MINUTES:mt,ALLOWED_RPC_METHODS:gt}=process.env;const wt=parseInt(z,10)||"3000";const vt=J||"tcp://node:28332";const $t=Y||"LTC";const St=q||"regtest";const bt=V||"dev";const Et=Z||"http://127.0.0.1:3000";const Tt=parseInt(Q,10)||1;const xt=X||"bcn";const Ot=tt||"bcn";const Rt=et||"bcn";const Nt=st||"127.0.0.1";const It=parseInt(rt,10)||"5432";const jt=nt||"http";const At=ot||"bcn-admin";const Pt=at||"kH4nU5Okm6-uyC0_mA5ztVNacJqZbYd_KGLl6mx722A=";const _t=it||"node";const Ht=parseInt(ct,10)||19332;const Ct=lt||W.get("version");const kt=dt||!1;const Mt=ut||"defaultwallet";const Ft=parseInt(ft,10)||3e3;const Lt=parseInt(yt,10)||1e4;const Bt=parseInt(ht,10)||500;const Ut=parseInt(mt,10)||3;const Dt=gt?gt.split(",").map((t=>new RegExp(t))):[];const Gt=y({level:["error","warn","info","http","verbose","debug","silly"][Tt],format:h.json(),transports:[new m.Console({format:h.combine(h.colorize(),h.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),h.printf((t=>`[2m${t.timestamp}[0m ${t.level} ${t.message}`)))})],exceptionHandlers:[new m.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new m.File({filename:"logs/rejections.log"})]});const Kt={maxFiles:1,maxSize:1e5};Tt>=0&&Gt.add(new m.File({filename:"error.log",level:"error"})),Tt>=1&&Gt.add(new m.File({filename:"logs/warn.log",level:"warn",...Kt})),Tt>=2&&Gt.add(new m.File({filename:"logs/info.log",level:"info",...Kt})),Tt>=3&&Gt.add(new m.File({filename:"logs/http.log",level:"http",...Kt})),Tt>=4&&Gt.add(new m.File({filename:"logs/verbose.log",level:"verbose",...Kt})),Tt>=5&&Gt.add(new m.File({filename:"logs/debug.log",level:"debug",...Kt}));const Wt=()=>"dev"===bt;const zt=()=>Tt>=6;const Jt=(t,e)=>{if(t.length!==e.length)return!1;for(let s=0;s<t.length;s++){const r=t[s];const n=Object.keys(r);let o=!1;for(let t=0;t<e.length;t++){const s=e[t];const a=Object.keys(s);if(n.length===a.length&&n.every((t=>a.includes(t)))&&n.every((t=>r[t]===s[t]))){o=!0;break}}if(!o)return!1}return!0};const Yt=t=>new Promise((e=>{setTimeout(e,t)}));const qt=(t,e)=>Object.assign(new Array(e).fill(null),t);const Vt={error:(t,e)=>{if(e.cn){const{host:s,port:r,database:n,user:o,password:a}=e.cn;Gt.debug(`Waiting for db to start { message:${t.message} host:${s}, port:${r}, database:${n}, user:${o}, password: ${a}`)}},noWarnings:!0};Wt()&&Tt>0&&(v.isAttached()?v.detach():(v.attach(Vt),v.setTheme("matrix")));const Zt=w(Vt)({host:Nt,port:It,database:Rt,user:xt,password:Ot,allowExitOnIdle:!0,idleTimeoutMillis:100});const{PreparedStatement:Qt}=w;class Xt{static async select(t){const e=new Qt({name:`OffChain.select.${Math.random()}`,text:'SELECT "data" FROM "OffChain" WHERE "id" = $1',values:[t]});return Zt.oneOrNone(e)}static async insert({id:t,data:e}){const s=new Qt({name:`OffChain.insert.${Math.random()}`,text:'INSERT INTO "OffChain" ("id", "data") VALUES ($1, $2) ON CONFLICT DO NOTHING',values:[t,e]});return Zt.none(s)}static async delete(t){const e=new Qt({name:`OffChain.delete.${Math.random()}`,text:'WITH deleted AS (DELETE FROM "OffChain" WHERE "id" = $1 RETURNING *) SELECT count(*) FROM deleted;',values:[t]});return(await Zt.any(e))[0].count>0}}class te{static async select(t){return(await Xt.select(t))?.data||null}static async insert(t){return Xt.insert(t)}static async delete(t){return Xt.delete(t)}}const{crypto:ee}=g;const se=s.Router();se.get("/:id",(async({params:{id:t},url:e,method:s},r)=>{void 0===r.locals.authToken&&(Gt.error(`Authorization failed at ${s} ${e}.`),r.status(403).json({error:`Authorization failed at ${s} ${e}.`}));try{const e=await te.select(t);e?r.status(200).json(e):r.status(403).json({error:"No entry found."})}catch(t){Gt.error(`GET ${e} failed with error '${t.message}'`),r.status(500).json({error:t.message})}})),se.post("/",(async(t,e)=>{const{body:{data:s},url:r}=t;try{const r=ee.Hash.sha256(Buffer.from(s)).toString("hex");await te.insert({id:r,data:s});const n=`${t.protocol}://${t.get("host")}/store/${r}`;e.status(201).json({_url:n})}catch(t){Gt.error(`POST ${r} failed with error '${t.message}'`),e.status(500).json({error:t.message})}})),se.delete("/:id",(async({params:{id:t},url:e,method:s},r)=>{Wt()||(Gt.error(`Authorization failed at ${s} ${e}.`),r.status(403).json({error:`Authorization failed at ${s} ${e}.`}));try{await te.delete(t)?r.status(204).send():r.status(403).json({error:"No entry found."})}catch(t){Gt.error(`DELETE ${e} failed with error '${t.message}'`),r.status(500).json({error:t.message})}}));const{PreparedStatement:re}=w;class ne{static async select(){return Zt.one('SELECT "syncedHeight", "bitcoindSyncedHeight", "bitcoindSyncedProgress" FROM "Sync"')}static async update({syncedHeight:t,bitcoindSyncedHeight:e,bitcoindSyncedProgress:s}){const r=new re({name:`Sync.update.${Math.random()}`,text:'UPDATE "Sync" SET "syncedHeight" = $1, "bitcoindSyncedHeight" = $2, "bitcoindSyncedProgress" = $3',values:[t,e,s]});await Zt.any(r)}}var oe=async()=>class{static async select(){return ne.select()}static async update(t){await ne.update(t)}}.select();const ae=new b({protocol:jt,user:At,pass:Pt,host:_t,port:Ht});const ie={createwallet:E.promisify(b.prototype.createwallet.bind(ae)),generateToAddress:E.promisify(b.prototype.generateToAddress.bind(ae)),getaddressinfo:E.promisify(b.prototype.getaddressinfo.bind(ae)),getBlock:E.promisify(b.prototype.getBlock.bind(ae)),getBlockchainInfo:E.promisify(b.prototype.getBlockchainInfo.bind(ae)),getBlockHash:E.promisify(b.prototype.getBlockHash.bind(ae)),getRawTransaction:E.promisify(b.prototype.getRawTransaction.bind(ae)),getTransaction:E.promisify(b.prototype.getTransaction.bind(ae)),importaddress:E.promisify(b.prototype.importaddress.bind(ae)),listunspent:E.promisify(b.prototype.listunspent.bind(ae)),sendRawTransaction:E.promisify(b.prototype.sendRawTransaction.bind(ae))};const{PreparedStatement:ce}=w;const{PreparedStatement:le}=w;class de{static async select(t){const e=new le({name:`Standard.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev" FROM "Standard" WHERE "address" = $1 AND "spent" = FALSE',values:[t]});return(await Zt.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)})))}static async insert(t){const e=t.flatMap((t=>[t.rev,t.address,t.satoshis,t.scriptPubKey,!1]));for(;e.length;){const t=e.splice(0,Lt);const s=[];for(let e=1;e<=t.length;e+=5)s.push(`($${e}, $${e+1}, $${e+2}, $${e+3}, $${e+4})`);const r=s.join(",");const n=new le({name:`Standard.insert.${Math.random()}`,text:`INSERT INTO "Standard"("rev", "address", "satoshis", "scriptPubKey", "spent") VALUES ${r}  ON CONFLICT DO NOTHING`,values:t});await Zt.none(n)}}static async update(t){const e=t.flatMap((t=>[`${t.prevTxId.toString("hex")}/${t.outputIndex}`]));if(0===e.length)return[];const s=[];for(let t=1;t<=e.length;t+=1)s.push(`("rev" = $${t})`);const r=s.join(" OR ");const n=new le({name:`Standard.update.${Math.random()}`,text:`UPDATE "Standard" SET "spent" = TRUE WHERE ${r} RETURNING "rev"`,values:e});return Zt.any(n)}static async getBalance(t){const e=new le({name:`Standard.getBalance.${Math.random()}`,text:'SELECT SUM("satoshis") FROM "Standard" WHERE "address" = $1 AND "spent" = FALSE',values:[t]});const s=await Zt.oneOrNone(e);return parseInt(s?.sum,10)||0}}class ue{static async select(t){return(await de.select(t)).map((t=>({...t,amount:t.satoshis/1e8})))}static async getBalance(t){return de.getBalance(t)}static async insert(t){const e=t.map((t=>({rev:`${t.txId}/${t.outputIndex}`,address:t.address.toString("legacy"),satoshis:t.satoshis,scriptPubKey:t.script.toHex(),spent:!1})));return de.insert(e)}}const{Script:pe,Transaction:fe}=g;const{Transaction:ye}=g;const{Input:he}=ye;const{PreparedStatement:me}=w;class ge{static async query(t){const{publicKey:e,classHash:s}=t;if(void 0===e&&void 0===s)return[];let r='SELECT "rev"\n      FROM "NonStandard"\n      WHERE "spent" = FALSE';const n=[];e&&(n.push(e),r+=' AND $1 = ANY ("publicKeys")'),s&&(n.push(s),r+=` AND "classHash" = $${n.length}`);const o=new me({name:`NonStandard.query.${Math.random()}`,text:r,values:n});return(await Zt.any(o)).map((t=>t.rev))}static async insert({id:t,rev:e,publicKeys:s,classHash:r}){const n=new me({name:`NonStandard.insert.${Math.random()}`,text:'INSERT INTO "NonStandard"("id", "rev", "publicKeys", "classHash", "spent") VALUES ($1, $2, $3, $4, FALSE) ON CONFLICT DO NOTHING',values:[t,e,s,r]});await Zt.none(n)}static async update(t){const e=new me({name:`NonStandard.update.${Math.random()}`,text:'UPDATE "NonStandard" SET "spent" = TRUE WHERE "rev" = $1 AND "spent" = FALSE',values:[t]});return Zt.none(e)}static async getRevsByIds(t){const e=new me({name:`NonStandard.getRevsByIds.${Math.random()}`,text:'SELECT "rev" FROM "NonStandard" WHERE "id" LIKE ANY($1) AND "spent" = FALSE',values:[[t]]});return Zt.any(e)}static async select(t){const e=new me({name:`NonStandard.select.${Math.random()}`,text:'SELECT "id", "classHash" FROM "NonStandard" WHERE "rev" = $1',values:[t]});return Zt.oneOrNone(e)}}class we{static async select(t){return ge.select(t)}static async query(t){return ge.query(t)}static async getRevsByIds(t){return ge.getRevsByIds(t)}static async insert(t){return ge.insert(t)}static async update(t){return ge.update(t)}}const{crypto:ve}=g;const $e=new S({chain:$t,network:St,url:Et});const Se=t=>t.tx.inputs.map((t=>g.Transaction.Input.fromObject({...t,script:t._scriptBuffer}))).filter((t=>!t.isNull()));const be=async t=>{try{const e=t.toString("hex");Gt.info(`ZMQ message { rawTx:${e} }`),"dev"===bt&&l.appendFileSync("zmqlog.log",`${e} \r\n`);const s=await $e.db.fromTxHex(e);try{await(async t=>{const e=Se(t);if(e.length>0){const s=await(async t=>{const e=Se(t);let s=[];return e.length>0&&(s=await(async t=>{const e=await class{static async areSpent(t){return class{static async areSpent(t){const e=t.map((t=>`('${t.prevTxId.toString("hex")}/${t.outputIndex}')`)).join(",");const s=new ce({name:`Utxos.areSpent.${Math.random()}`,text:`SELECT "rev", "stSpent", "nstSpent" from "Utxos"  WHERE "rev" IN (${e})`});return Zt.any(s)}}.areSpent(t)}}.areSpent(t);return e})(e)),s})(t);e.forEach((e=>{const r=`${e.prevTxId.toString("hex")}/${e.outputIndex}`;s.some((t=>t.rev===r))||Gt.error(`Error: repaired needed. tx: ${t.tx.id} input to repair: ${r}`)}))}await(async(t,e)=>{const s=t.flatMap(((t,s)=>{const r=pe.fromBuffer(t._scriptBuffer);const{PUBKEYHASH_OUT:n,SCRIPTHASH_OUT:o}=pe.types;if(![n,o].includes(r.classify()))return[];const a=r.toAddress(St).toString("legacy");const i=r.toHex();const c=t.satoshis/1e8;const l=Math.round(t.satoshis);return[new fe.UnspentOutput({address:a,txId:e,outputIndex:s,scriptPubKey:i,amount:c,satoshis:l})]}));await ue.insert(s)})(t.tx.outputs,t.txId),await(async t=>{const e=t.map((t=>he.fromObject({...t,script:t._scriptBuffer}))).filter((t=>!t.isNull()));return de.update(e)})(t.tx.inputs);const{inRevs:s=[],outRevs:r=[],outData:n=[]}=t;await(async(t,e,s)=>{const r=Math.max(t.length,e.length);const n=qt(t,r);const o=qt(e,r);const a=(i=o,n.map(((t,e)=>[t,i[e]])));var i;await Promise.all(a.map((async([t,e],r)=>{const{__cls:n="",_owners:o=[]}=s[r]||{};if(null===t&&e)return/^[0-9A-Fa-f]{64}\/\d+$/.test(e),void await we.insert({id:e,rev:e,publicKeys:o,classHash:ve.Hash.sha256(Buffer.from(n)).toString("hex")});if(e&&t){const{id:s="",classHash:r=""}=await we.select(t)||{};await we.insert({id:s,classHash:r,rev:e,publicKeys:o}),await we.update(t)}})))})(s,r,n)})(s)}catch(t){Gt.error(`Error parsing transaction ${t.message} ${t.stack}`)}}catch(t){Gt.error(`RawTxSubscriber failed with error '${t.message} ${t.stack}'`)}};var Ee=async t=>ue.select(t);class Te{static async getTransaction(t){const{result:e}=await ie.getTransaction(t);return e}static async getBulkTransactions(t){return(await Promise.all(t.map((t=>ie.getRawTransaction(t))))).map((t=>t.result))}static async sendRawTransaction(t){const{result:e,error:s}=await ie.sendRawTransaction(t);if(s)throw Gt.error(s),new Error("Error sending transaction");return e}}var xe=async t=>await Te.getBulkTransactions(t);var Oe=async t=>(void 0===(await ie.getaddressinfo(t)).result.timestamp&&(Gt.info(`Importing address: ${t}`),await ie.importaddress(t,!1)),(await ie.listunspent(0,999999,[t])).result);const Re=new b({protocol:jt,user:At,pass:Pt,host:_t,port:Ht});const Ne={};const Ie=JSON.parse(JSON.stringify(b.callspec));Object.keys(Ie).forEach((t=>{Ie[t.toLowerCase()]=Ie[t]}));const je={str:t=>t.toString(),string:t=>t.toString(),int:t=>parseFloat(t),float:t=>parseFloat(t),bool:t=>!0===t||"1"===t||1===t||"true"===t||"true"===t.toString().toLowerCase(),obj:t=>"string"==typeof t?JSON.parse(t):t};try{Object.keys(b.prototype).forEach((t=>{if(t&&"function"==typeof b.prototype[t]){const e=t.toLowerCase();Ne[t]=E.promisify(b.prototype[t].bind(Re)),Ne[e]=E.promisify(b.prototype[e].bind(Re))}}))}catch(t){Gt.error(`Error occurred while binding RPC methods: ${t.message}`)}const{ec:Ae}=T;const Pe=new Ae("secp256k1");const _e=s();let He;try{He=r.createServer(_e)}catch(t){throw Gt.error(`Starting server failed with error '${t.message}'`),t}if(Gt.info(`Server listening on port ${wt}`),_e.use(e()),"dev"!==bt){const t=o({windowMs:9e5,max:300,standardHeaders:!0,legacyHeaders:!1});_e.use(t)}_e.use(t.json({limit:"100mb"})),_e.use(t.urlencoded({limit:"100mb",extended:!0})),_e.use((async(t,e,s)=>{try{const r=t.get("Authentication");if(!r)return void s();const n=(t=>{const e=t.split(" ");if(2!==e.length||"Bearer"!==e[0])throw new Error("Authentication header is invalid.");const s=Buffer.from(e[1],"base64").toString().split(":");if(3!==s.length)throw new Error;return{signature:s[0],publicKey:s[1],timestamp:parseInt(s[2],10)}})(r);const{signature:o,publicKey:a,timestamp:i}=n;if(Date.now()-i>1e3*Ut*60)return void e.status(401).json({error:"Signature is too old."});const c=x.sha256().update(Et+i).digest("hex");if(!Pe.keyFromPublic(a,"hex").verify(c,o))return void e.status(401).json({error:"The origin and public key pair doesn't match the signature."});e.locals.authToken=n,s()}catch(t){Gt.error(`Auth failed with error '${t.message}'`),e.status(401).json({error:t.message})}})),_e.use((({url:t},e,s)=>{if(void 0!==e.locals.authToken)try{let t;try{const e=Wt()?"bcn.test.config.json":"bcn.config.json";const s=p(f(import.meta.url));t=l.readFileSync(u.join(s,"..","..",e))}catch(t){if(t.message.includes("ENOENT: no such file or directory"))return void s();throw Gt.error(`Access-list failed with error '${t.message}'`),t}const{blacklist:r,whitelist:n}=JSON.parse(t.toString());if(r&&n)return void e.status(403).json({error:"Cannot enforce blacklist and whitelist at the same time."});const{publicKey:o}=e.locals.authToken;if(n&&!n.includes(o)||r&&r.includes(o))return void e.status(403).json({error:`Public key ${o} is not allowed.`});s()}catch(s){Gt.error(`Authorization failed at ${t} with error: '${s.message}'`),e.status(403).json({error:s.message})}else s()}));const Ce=(()=>{const t=s.Router();return t.get("/wallet/:address/utxos",(async({params:t,url:e},s)=>{try{const{address:e}=t;const r=await Ee(e);const n=r.map((({satoshis:t,rev:e})=>{const[s,r]=e.split("/");return{amount:t/1e8,txid:s,vout:parseInt(r,10)}}));if(zt()){let t=[];let s=!1;let r=10;do{try{t=await Oe(e)||[],s=!0}catch(t){Gt.debug(`Retrying to get utxos '${t.message}'`),await Yt(1e3),r-=1}}while(!s&&r>0);const o=t.map((({amount:t,txid:e,vout:s})=>({amount:t,txid:e,vout:s})));Jt(n,o)||(Gt.error(`Inconsistency on UTXO set calculation for address ${e}.`),Gt.error(`db utxos ${JSON.stringify(n,null,2)} rpc utxos ${JSON.stringify(o,null,2)}`),Gt.error(`db utxos length ${n.length} rpc utxos length: ${o.length}`))}s.status(200).json(r)}catch(t){Gt.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.get("/non-standard-utxos",(async({query:t,url:e},s)=>{try{const e=await(async t=>we.query(t))(t);s.status(200).json(e)}catch(t){Gt.error(`GET ${e} failed with error '${t.messages}'`),s.status(404).json({error:t.message})}})),t.get("/address/:address/balance",(async({params:t,url:e},s)=>{try{const{address:r}=t;const n=await Ee(r);const o=await(async t=>ue.getBalance(t))(r);const a=n.map((({satoshis:t,rev:e})=>{const[s,r]=e.split("/");return{amount:t/1e8,txid:s,vout:parseInt(r,10)}}));if(zt()){let t=[];let s=!1;let n=10;do{try{t=await Oe(r)||[],s=!0}catch(t){Gt.debug(`Retrying ${e} getStandardUtxosAction: ${t.message}`),await Yt(1e3),n-=1}}while(!s&&n>0);const i=1e8*t.reduce(((t,e)=>t+e.amount),0);const c=t.map((({amount:t,txid:e,vout:s})=>({amount:t,txid:e,vout:s})));o===Math.round(i)&&Jt(a,c)||(Gt.error(`Inconsistency on balance calculation for address ${r}: dbBalance ${o} rpcBalance: ${i}`),Gt.error(`db utxos ${a}`),Gt.error(`rpc utxos: ${JSON.stringify(a)}`))}s.status(200).json(o)}catch(t){Gt.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/tx/bulk",(async({body:{txIds:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(500).json({error:"Missing input txIds."});const e=await xe(t);e?s.status(200).json(e):s.status(404).json({error:"Not found"})}catch(t){Gt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/tx/send",(async({body:{rawTx:t},url:e},s)=>{try{const e=await(async t=>Te.sendRawTransaction(t))(t);await be(t),s.status(200).json(e)}catch(t){Gt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/revs",(async({body:{ids:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(404).json({error:"Missing input object ids."});const e=await(async t=>(await we.getRevsByIds(t)).map((t=>t.rev)))(t);s.status(200).json(e)}catch(t){Gt.error(`POST ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/rpc",(async({body:t,url:e},s)=>{try{if(!t||!t.method)throw new Error("Please provide appropriate RPC method name");if(!Dt.some((e=>e.test(t.method))))throw new Error("Method is not allowed");const e=function(t,e){if(void 0===Ie[t]||null===Ie[t])throw new Error("This RPC method does not exist, or not supported");const s=e.trim().split(" ");const r=Ie[t].trim().split(" ");if(0===e.trim().length&&0!==Ie[t].trim().length)throw new Error(`Too few params provided. Expected ${r.length} Provided 0`);if(0!==e.trim().length&&0===Ie[t].trim().length)throw new Error(`Too many params provided. Expected 0 Provided ${s.length}`);if(s.length<r.length)throw new Error(`Too few params provided. Expected ${r.length} Provided ${s.length}`);if(s.length>r.length)throw new Error(`Too many params provided. Expected ${r.length} Provided ${s.length}`);return 0===e.length?[]:s.map(((t,e)=>je[r[e]](t)))}(t.method,t.params);const r=e.length?await Ne[t.method](...e):await Ne[t.method]();return void s.status(200).json({result:r})}catch(t){Gt.error(`POST ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/non-standard-utxo",(async(t,e)=>{e.status(500).json({error:"Please upgrade to @bitcoin-computer/lib-testing@0.7.7.0-beta or greater."})})),t.get("/tx/:txId",(async({params:t},e)=>{const{txId:s}=t;const[r]=await xe([s]);r?e.status(200).json(r):e.status(404).json({error:"Not found"})})),t})();_e.use(`/v1/${$t}/${St}`,Ce),_e.use("/v1/store",se),_e.get("/",((t,e)=>e.status(200).send("OK"))),_e.get("/health",((t,e)=>e.status(200).send("healthy"))),_e.get("/version",((t,e)=>e.status(200).send(Ct))),He.listen(wt,(()=>{Gt.info(`Rev ${Ct} Started web server on port ${wt}`)}));const ke=new n.Subscriber;ke.connect(vt),ke.subscribe("rawtx"),Gt.info(`ZMQ Subscriber connected to ${vt}`),(async()=>{await(async()=>{await $((()=>Zt.connect()),{startingDelay:Bt})})(),await(async t=>{try{await(async()=>{try{await ie.createwallet(Mt)}catch(t){Gt.debug(`Wallet creation failed with error '${t.message}'`)}})(),"regtest"!==St&&await(async()=>{let t=-1;let e=-1;let s=0;Gt.info("Checking sync progress...syncedHeight: -1 from -1");do{({syncedHeight:t,bitcoindSyncedHeight:e,bitcoindSyncedProgress:s}=await oe()),t>0?Gt.info(`Sync progress ${t}/${e} blocks [${(t/e*100).toFixed(4)}% (bitcoind progress: ${(100*s).toFixed(4)}%)]`):Gt.info(`Sync progress initializing... ${t}/${e} blocks `),await Yt(Ft)}while(t<e||s<.999);Gt.info(`BCN reaches sync end...currentBlockHeight: ${t} from ${e} (chain progress: ${(100*s).toFixed(4)})`)})(),kt?Gt.info(`Bitcoin Computer Node is ready on testing ${Ct}`):Gt.info(`Bitcoin Computer Node is ready ${Ct}`);for await(const[,e]of t)await be(e)}catch(t){Gt.error(`ZMQ subscription failed with error '${t.message}'`)}})(ke)})();
