import{backOff as t}from"exponential-backoff";import{Computer as e}from"@bitcoin-computer/lib";import n from"dotenv";import s from"is-primitive";import r from"is-plain-object";import o from"fs";import a from"os";import{dirname as i}from"path";import{fileURLToPath as c}from"url";import{createLogger as l,format as d,transports as p}from"winston";import u from"bitcoind-rpc";import y from"util";import f from"pg-promise";import h from"pg-monitor";import{Bitcoin as g}from"bitcoin-computer-bitcore";const{deleteProperty:m}=Reflect;const S=s;const v=r;const b=t=>"object"==typeof t&&null!==t||"function"==typeof t;const w=t=>{if(!S(t))throw new TypeError("Object keys must be strings or symbols");if((t=>"__proto__"===t||"constructor"===t||"prototype"===t)(t))throw new Error(`Cannot set unsafe key: "${t}"`)};const E=(t,e)=>e&&"function"==typeof e.split?e.split(t):"symbol"==typeof t?[t]:Array.isArray(t)?t:((t,e,n)=>{const s=(t=>Array.isArray(t)?t.flat().map(String).join(","):t)(e?((t,e)=>{if("string"!=typeof t||!e)return t;let n=t+";";return void 0!==e.arrays&&(n+=`arrays=${e.arrays};`),void 0!==e.separator&&(n+=`separator=${e.separator};`),void 0!==e.split&&(n+=`split=${e.split};`),void 0!==e.merge&&(n+=`merge=${e.merge};`),void 0!==e.preservePaths&&(n+=`preservePaths=${e.preservePaths};`),n})(t,e):t);w(s);const r=T.cache.get(s)||n();return T.cache.set(s,r),r})(t,e,(()=>((t,e={})=>{const n=e.separator||".";const s="/"!==n&&e.preservePaths;if("string"==typeof t&&!1!==s&&/\//.test(t))return[t];const r=[];let o="";const a=t=>{let e;""!==t.trim()&&Number.isInteger(e=Number(t))?r.push(e):r.push(t)};for(let e=0;e<t.length;e++){const s=t[e];"\\"!==s?s!==n?o+=s:(a(o),o=""):o+=t[++e]}return o&&a(o),r})(t,e)));const $=(t,e,n,s)=>{if(w(e),void 0===n)m(t,e);else if(s&&s.merge){const r="function"===s.merge?s.merge:Object.assign;r&&v(t[e])&&v(n)?t[e]=r(t[e],n):t[e]=n}else t[e]=n;return t};const T=(t,e,n,s)=>{if(!e||!b(t))return t;const r=E(e,s);let o=t;for(let t=0;t<r.length;t++){const e=r[t];const a=r[t+1];if(w(e),void 0===a){$(o,e,n,s);break}"number"!=typeof a||Array.isArray(o[e])?(b(o[e])||(o[e]={}),o=o[e]):o=o[e]=[]}return t};T.split=E,T.cache=new Map,T.clear=()=>{T.cache=new Map};var H=T;var R=o;var O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var _=function(){function t(t,e){for(var n=0;n<e.length;n++){var s=e[n];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}return function(e,n,s){return n&&t(e.prototype,n),s&&t(e,s),e}}();var A=function t(e,n){var s=n.indexOf(".");if(!~s){if(null==e)return;return e[n]}var r=n.substring(0,s),o=n.substring(s+1);if(null!=e)return e=e[r],o?t(e,o):e},x=H,P=function(t,e){if("function"!=typeof e)return JSON.parse(R.readFileSync(t));R.readFile(t,"utf-8",(function(t,n){try{n=JSON.parse(n)}catch(e){t=t||e}e(t,n)}))},I=o,k=a;var F=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.options=n=n||{},n.stringify_width=n.stringify_width||2,n.stringify_fn=n.stringify_fn||null,n.stringify_eol=n.stringify_eol||!1,n.ignore_dots=n.ignore_dots||!1,this.path=e,this.data=this.read()}return _(t,[{key:"set",value:function(t,e,n){var s=this;return"object"===(void 0===t?"undefined":N(t))?function(t,e){var n=0,s=[];if(Array.isArray(t))for(;n<t.length&&!1!==e(t[n],n);++n);else if("object"===(void 0===t?"undefined":O(t))&&null!==t)for(s=Object.keys(t);n<s.length&&!1!==e(t[s[n]],s[n]);++n);}(t,(function(t,e){x(s.data,e,t,n)})):this.options.ignore_dots?this.data[t]=e:x(this.data,t,e,n),this.options.autosave&&this.save(),this}},{key:"get",value:function(t){return t?this.options.ignore_dots?this.data[t]:A(this.data,t):this.toObject()}},{key:"unset",value:function(t){return this.set(t,void 0)}},{key:"append",value:function(t,e){var n=this.get(t);if(n=void 0===n?[]:n,!Array.isArray(n))throw new Error("The data is not an array!");return n.push(e),this.set(t,n),this}},{key:"pop",value:function(t){var e=this.get(t);if(!Array.isArray(e))throw new Error("The data is not an array!");return e.pop(),this.set(t,e),this}},{key:"read",value:function(t){if(!t)try{return P(this.path)}catch(t){return{}}P(this.path,(function(e,n){t(null,n=e?{}:n)}))}},{key:"write",value:function(t,e){return e?I.writeFile(this.path,t,e):I.writeFileSync(this.path,t),this}},{key:"empty",value:function(t){return this.write("{}",t)}},{key:"save",value:function(t){var e=JSON.stringify(this.data,this.options.stringify_fn,this.options.stringify_width,this.options.stringify_eol);return this.write(this.options.stringify_eol?e+k.EOL:e,t),this}},{key:"toObject",value:function(){return this.data}}]),t}();n.config();const M=new F(`${i(c(import.meta.url))}/../../package.json`,{stringify_eol:!0});const{PORT:B,ZMQ_URL:C,CHAIN:L,NETWORK:D,BCN_ENV:U,BCN_URL:j,DEBUG_MODE:K,POSTGRES_USER:G,POSTGRES_PASSWORD:W,POSTGRES_DB:Y,POSTGRES_HOST:V,POSTGRES_PORT:q,RPC_PROTOCOL:z,RPC_USER:J,RPC_PASSWORD:Z,RPC_HOST:Q,RPC_PORT:X,SERVER_VERSION:tt,TESTING:et,DEFAULT_WALLET:nt,SYNC_HEIGHT:st,SYNC_INTERVAL_CHECK:rt,POSTGRES_MAX_PARAM_NUM:ot,DB_CONNECTION_RETRY_TIME:at,SIGNATURE_FRESHNESS_MINUTES:it,ALLOWED_RPC_METHODS:ct}=process.env;const lt=L||"LTC";const dt=D||"regtest";const pt=U||"dev";const ut=j||"http://127.0.0.1:3000";const yt=parseInt(K,10)||1;const ft=G||"bcn";const ht=W||"bcn";const gt=Y||"bcn";const mt=V||"127.0.0.1";const St=parseInt(q,10)||"5432";const vt=z||"http";const bt=J||"bcn-admin";const wt=Z||"kH4nU5Okm6-uyC0_mA5ztVNacJqZbYd_KGLl6mx722A=";const Et=Q||"node";const $t=parseInt(X,10)||19332;tt||M.get("version");const Tt=parseInt(st,10)||1;const Ht=parseInt(ot,10)||1e4;const Rt=parseInt(at,10)||500;!ct||ct.split(",").map((t=>new RegExp(t)));const Ot=l({level:["error","warn","info","http","verbose","debug","silly"][yt],format:d.json(),transports:[new p.Console({format:d.combine(d.colorize(),d.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),d.printf((t=>`[2m${t.timestamp}[0m ${t.level} ${t.message}`)))})],exceptionHandlers:[new p.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new p.File({filename:"logs/rejections.log"})]});const Nt={maxFiles:1,maxSize:1e5};yt>=0&&Ot.add(new p.File({filename:"error.log",level:"error"})),yt>=1&&Ot.add(new p.File({filename:"logs/warn.log",level:"warn",...Nt})),yt>=2&&Ot.add(new p.File({filename:"logs/info.log",level:"info",...Nt})),yt>=3&&Ot.add(new p.File({filename:"logs/http.log",level:"http",...Nt})),yt>=4&&Ot.add(new p.File({filename:"logs/verbose.log",level:"verbose",...Nt})),yt>=5&&Ot.add(new p.File({filename:"logs/debug.log",level:"debug",...Nt}));const _t=new u({protocol:vt,user:bt,pass:wt,host:Et,port:$t});const At={createwallet:y.promisify(u.prototype.createwallet.bind(_t)),generateToAddress:y.promisify(u.prototype.generateToAddress.bind(_t)),getaddressinfo:y.promisify(u.prototype.getaddressinfo.bind(_t)),getBlock:y.promisify(u.prototype.getBlock.bind(_t)),getBlockchainInfo:y.promisify(u.prototype.getBlockchainInfo.bind(_t)),getBlockHash:y.promisify(u.prototype.getBlockHash.bind(_t)),getRawTransaction:y.promisify(u.prototype.getRawTransaction.bind(_t)),getTransaction:y.promisify(u.prototype.getTransaction.bind(_t)),importaddress:y.promisify(u.prototype.importaddress.bind(_t)),listunspent:y.promisify(u.prototype.listunspent.bind(_t)),sendRawTransaction:y.promisify(u.prototype.sendRawTransaction.bind(_t))};const xt=(t,e)=>Object.assign(new Array(e).fill(null),t);const Pt={error:(t,e)=>{if(e.cn){const{host:n,port:s,database:r,user:o,password:a}=e.cn;Ot.debug(`Waiting for db to start { message:${t.message} host:${n}, port:${s}, database:${r}, user:${o}, password: ${a}`)}},noWarnings:!0};"dev"===pt&&yt>0&&(h.isAttached()?h.detach():(h.attach(Pt),h.setTheme("matrix")));const It=f(Pt)({host:mt,port:St,database:gt,user:ft,password:ht,allowExitOnIdle:!0,idleTimeoutMillis:100});const{PreparedStatement:kt}=f;class Ft{static async select(){return It.one('SELECT "syncedHeight", "bitcoindSyncedHeight", "bitcoindSyncedProgress" FROM "Sync"')}static async update({syncedHeight:t,bitcoindSyncedHeight:e,bitcoindSyncedProgress:n}){const s=new kt({name:`Sync.update.${Math.random()}`,text:'UPDATE "Sync" SET "syncedHeight" = $1, "bitcoindSyncedHeight" = $2, "bitcoindSyncedProgress" = $3',values:[t,e,n]});await It.any(s)}}class Mt{static async select(){return Ft.select()}static async update(t){await Ft.update(t)}}var Bt=async()=>Mt.select();var Ct=async t=>{await Mt.update(t)};const{PreparedStatement:Lt}=f;class Dt{static async select(t){const e=new Lt({name:`Standard.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev" FROM "Standard" WHERE "address" = $1 AND "spent" = FALSE',values:[t]});return(await It.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)})))}static async insert(t){const e=t.flatMap((t=>[t.rev,t.address,t.satoshis,t.scriptPubKey,!1]));for(;e.length;){const t=e.splice(0,Ht);const n=[];for(let e=1;e<=t.length;e+=5)n.push(`($${e}, $${e+1}, $${e+2}, $${e+3}, $${e+4})`);const s=n.join(",");const r=new Lt({name:`Standard.insert.${Math.random()}`,text:`INSERT INTO "Standard"("rev", "address", "satoshis", "scriptPubKey", "spent") VALUES ${s}  ON CONFLICT DO NOTHING`,values:t});await It.none(r)}}static async update(t){const e=t.flatMap((t=>[`${t.prevTxId.toString("hex")}/${t.outputIndex}`]));if(0===e.length)return[];const n=[];for(let t=1;t<=e.length;t+=1)n.push(`("rev" = $${t})`);const s=n.join(" OR ");const r=new Lt({name:`Standard.update.${Math.random()}`,text:`UPDATE "Standard" SET "spent" = TRUE WHERE ${s} RETURNING "rev"`,values:e});return It.any(r)}static async getBalance(t){const e=new Lt({name:`Standard.getBalance.${Math.random()}`,text:'SELECT SUM("satoshis") FROM "Standard" WHERE "address" = $1 AND "spent" = FALSE',values:[t]});const n=await It.oneOrNone(e);return parseInt(n?.sum,10)||0}}const{Transaction:Ut}=g;const{Input:jt}=Ut;var Kt=async t=>{const e=t.map((t=>jt.fromObject({...t,script:t._scriptBuffer}))).filter((t=>!t.isNull()));return Dt.update(e)};const{Script:Gt,Transaction:Wt}=g;var Yt=async(t,e)=>{const n=t.flatMap(((t,n)=>{const s=Gt.fromBuffer(t._scriptBuffer);const{PUBKEYHASH_OUT:r,SCRIPTHASH_OUT:o}=Gt.types;if(![r,o].includes(s.classify()))return[];const a=s.toAddress(dt).toString("legacy");const i=s.toHex();const c=t.satoshis/1e8;const l=Math.round(t.satoshis);return[new Wt.UnspentOutput({address:a,txId:e,outputIndex:n,scriptPubKey:i,amount:c,satoshis:l})]}));await class{static async select(t){return(await Dt.select(t)).map((t=>({...t,amount:t.satoshis/1e8})))}static async getBalance(t){return Dt.getBalance(t)}static async insert(t){const e=t.map((t=>({rev:`${t.txId}/${t.outputIndex}`,address:t.address.toString("legacy"),satoshis:t.satoshis,scriptPubKey:t.script.toHex(),spent:!1})));return Dt.insert(e)}}.insert(n)};const{PreparedStatement:Vt}=f;class qt{static async query(t){const{publicKey:e,classHash:n}=t;if(void 0===e&&void 0===n)return[];let s='SELECT "rev"\n      FROM "NonStandard"\n      WHERE "spent" = FALSE';const r=[];e&&(r.push(e),s+=' AND $1 = ANY ("publicKeys")'),n&&(r.push(n),s+=` AND "classHash" = $${r.length}`);const o=new Vt({name:`NonStandard.query.${Math.random()}`,text:s,values:r});return(await It.any(o)).map((t=>t.rev))}static async insert({id:t,rev:e,publicKeys:n,classHash:s}){const r=new Vt({name:`NonStandard.insert.${Math.random()}`,text:'INSERT INTO "NonStandard"("id", "rev", "publicKeys", "classHash", "spent") VALUES ($1, $2, $3, $4, FALSE) ON CONFLICT DO NOTHING',values:[t,e,n,s]});await It.none(r)}static async update(t){const e=new Vt({name:`NonStandard.update.${Math.random()}`,text:'UPDATE "NonStandard" SET "spent" = TRUE WHERE "rev" = $1 AND "spent" = FALSE',values:[t]});return It.none(e)}static async getRevsByIds(t){const e=new Vt({name:`NonStandard.getRevsByIds.${Math.random()}`,text:'SELECT "rev" FROM "NonStandard" WHERE "id" LIKE ANY($1) AND "spent" = FALSE',values:[[t]]});return It.any(e)}static async select(t){const e=new Vt({name:`NonStandard.select.${Math.random()}`,text:'SELECT "id", "classHash" FROM "NonStandard" WHERE "rev" = $1',values:[t]});return It.oneOrNone(e)}}class zt{static async select(t){return qt.select(t)}static async query(t){return qt.query(t)}static async getRevsByIds(t){return qt.getRevsByIds(t)}static async insert(t){return qt.insert(t)}static async update(t){return qt.update(t)}}const{crypto:Jt}=g;var Zt=async(t,e,n)=>{const s=Math.max(t.length,e.length);const r=xt(t,s);const o=xt(e,s);const a=(i=o,r.map(((t,e)=>[t,i[e]])));var i;await Promise.all(a.map((async([t,e],s)=>{const{__cls:r="",_owners:o=[]}=n[s]||{};if(null===t&&e)return/^[0-9A-Fa-f]{64}\/\d+$/.test(e),void await zt.insert({id:e,rev:e,publicKeys:o,classHash:Jt.Hash.sha256(Buffer.from(r)).toString("hex")});if(e&&t){const{id:n="",classHash:s=""}=await zt.select(t)||{};await zt.insert({id:n,classHash:s,rev:e,publicKeys:o}),await zt.update(t)}})))};var Qt=async t=>{for(let e=0;e<t.length;e+=1)try{const{tx:n,txId:s,inRevs:r=[],outRevs:o=[],outData:a=[]}=t[e];await Yt(n.outputs,n.id),await Kt(n.inputs),await Zt(r,o,a),Ot.info(`Synced to '${s}'`)}catch(n){n.message.includes("duplicate key value violates unique constraint")||Ot.error(`Processing tx ${t[e].tx.id} failed with error '${n.message}'`)}};const Xt=new e({chain:lt,network:dt,url:ut});const te=async(t,e,n)=>{try{let{result:s}=await At.getBlockHash(t);for(;t<=e;){const{result:r}=await At.getBlock(s,2);const{tx:o,nextblockhash:a}=r;const i=`Backfilling progress ${t}/${e} blocks [${(t/e*100).toFixed(4)}% (bitcoind progress: ${(100*n).toFixed(4)}%)] Backfilling ${o.length} transactions...`;Ot.info(i);const c=[];for(let e=0;e<o.length;e+=1)try{const t=await Xt.db.fromTxHex(o[e].hex);c.push(t)}catch(n){Ot.error(`Error [sync.action]: fromTxHex failed. Height: ${t} - tx: ${o[e].hex} - error:  ${n.message}`)}await Qt(c),await Ct({syncedHeight:t,bitcoindSyncedHeight:e,bitcoindSyncedProgress:n}),s=a,t+=1}}catch(t){Ot.error(`Sync action failed with error '${t.message}'`)}};!function(){try{const e=`Synchronizing { url: ${ut}, chain:${lt} network:${dt} }`;Ot.info(e),"regtest"!==dt&&(async()=>{await(async()=>{await t((()=>It.connect()),{startingDelay:Rt})})(),await(async()=>{try{let e=await t((()=>(async()=>{const t=await At.getBlockchainInfo();const e=(100*parseFloat(t.result.verificationprogress)).toFixed(4);const{blocks:n}=t.result;const s=`Bitcoind Synced Progress { percentage:${e}%, blocks:${n} }`;if(Ot.info(s),parseFloat(t.result.verificationprogress)<=1e-6)throw new Error("Node not ready yet");return t})()),{startingDelay:5e3,timeMultiple:1,numOfAttempts:720});let n=await Bt();await Ct({syncedHeight:n.syncedHeight,bitcoindSyncedHeight:e.result.blocks,bitcoindSyncedProgress:e.result.verificationprogress});let s=Math.max(Tt,n.syncedHeight+1);const r=(100*parseFloat(e.result.verificationprogress)).toFixed(4);const o=e.result.blocks;const{syncedHeight:a}=n;const i=`Starting sync process { bitcoind.progress:${r}%, bitcoindSyncedHeight:${o}, syncedHeight:${a}, currentBlockHeight:${s} }`;for(Ot.info(i);parseFloat(e.result.verificationprogress)<.999||s<=n.bitcoindSyncedHeight;){await te(s,n.bitcoindSyncedHeight,e.result.verificationprogress),e=await At.getBlockchainInfo(),n=await Bt(),n.bitcoindSyncedHeight=e.result.blocks,await Ct({syncedHeight:n.syncedHeight,bitcoindSyncedHeight:n.bitcoindSyncedHeight,bitcoindSyncedProgress:e.result.verificationprogress});const t=(100*parseFloat(e.result.verificationprogress)).toFixed(4);Ot.info(`Bitcoind progress: ${t}%`),s=n.syncedHeight+1}}catch(t){Ot.error(`Sync action failed with error '${t.message}'`)}})()})()}catch(t){Ot.error(`Synchronizing failed with error '${t.message}'`)}}();
