"use strict";var e=require("chai");require("ses"),require("bitcoin-computer-bitcore"),require("axios"),require("child_process"),require("crypto"),require("crypto-js"),require("eciesjs"),require("@endo/static-module-record"),process.env.CHAIN,process.env.NETWORK,process.env.BCN_URL,process.env.RPC_USER,process.env.RPC_PASSWORD,parseInt(process.env.BC_DUST_LIMIT||"",10),parseInt(process.env.BC_DEFAULT_FEE||"",10),parseInt(process.env.BC_SCRIPT_CHUNK_SIZE||"",10);const r=e=>(Object.prototype.toString.call(e).match(/\s([a-zA-Z]+)/)||[])[1];const t=e=>"object"==typeof e?r(e):r(e).toLowerCase();const s=e=>{if((e=>["number","string","boolean","undefined","Null"].includes(t(e)))(e))return e;if((e=>"Array"===t(e))(e))return e.map(s);if((e=>"Object"===t(e))(e)){const r=Object.keys(e).reduce(((r,t)=>(r[t]=s(e[t]),r)),{});const t=Object.create(Object.getPrototypeOf(e));return Object.assign(t,r)}throw new Error(`Unsupported data type for clone: ${t(e)}`)};function o(e,r){let t=0;return r.map((r=>"__"===r?e[t++]:r))}function c(e){return{smartArgs:e.filter((e=>e._rev)),dumbArgs:e.map((e=>e._rev?"__":e))}}describe("helpers",(()=>{describe("splitArgs",(()=>{it("should work for an array of dumb objects",(()=>{e.expect(c([{a:1},{b:2}])).to.deep.eq({dumbArgs:[{a:1},{b:2}],smartArgs:[]})})),it("should work for an array of smart objects",(()=>{e.expect(c([{a:1,_rev:"rev1"},{b:2,_rev:"rev1"}])).to.deep.eq({dumbArgs:["__","__"],smartArgs:[{_rev:"rev1",a:1},{_rev:"rev1",b:2}]})})),it("should work for an array of smart objects",(()=>{e.expect(c([{a:1},{b:2,_rev:"rev1"}])).to.deep.eq({dumbArgs:[{a:1},"__"],smartArgs:[{_rev:"rev1",b:2}]})}))})),describe("mergeArgs",(()=>{it("should work for an array of dumb objects",(()=>{const r=[{a:1}];const t=s(r);e.expect(o(r,["__"])).to.deep.eq([{a:1}]),e.expect(t).to.deep.eq(r)})),it("should work for an array of dumb objects",(()=>{const r=[{a:1},{b:2}];const{smartArgs:t,dumbArgs:s}=c(r);e.expect(o(t,s)).to.deep.eq(r)})),it("should work for an array of smart objects",(()=>{const r=[{a:1,_rev:"rev0"},{b:2,_rev:"rev0"}];const{smartArgs:t,dumbArgs:s}=c(r);e.expect(o(t,s)).to.deep.eq(r)})),it("should work for a mixed array of objects",(()=>{const r=[{a:1},{b:2,_rev:"rev0"}];const{smartArgs:t,dumbArgs:s}=c(r);e.expect(o(t,s)).to.deep.eq(r)}))}))}));
